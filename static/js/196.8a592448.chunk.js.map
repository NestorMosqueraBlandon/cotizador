{"version":3,"file":"static/js/196.8a592448.chunk.js","mappings":"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","sources":["views/app-views/editUser/index.js"],"sourcesContent":["import React, { useEffect, useRef, useState, useContext } from 'react'\nimport { Form, Input, InputNumber, Upload, Button, Card, message } from 'antd';\nimport { InboxOutlined } from '@ant-design/icons';\nimport { APP_PREFIX_PATH, API_BASE_URL } from 'configs/AppConfig'\nimport axios from 'axios'\nimport Loading from 'components/shared-components/Loading'\nimport ColorPicker from 'components/shared-components/ColorPicker'\nimport { UserContext } from 'contexts/UserContext';\n\nconst layout = {\n  labelCol: { span: 4 },\n  wrapperCol: { span: 14 },\n};\n\nconst validateMessages = {\n  required: 'This field is required!',\n  types: {\n    email: 'Not a validate email!',\n    number: 'Not a validate number!',\n  },\n  number: {// eslint-disable-next-line\n    range: 'Must be between ${min} and ${max}',\n  },\n};\n\nconst uploadHandle = (info) => {\n  if (info.fileList[1]) {\n    return [info.fileList[1]]\n  } else if (info.fileList[0]) {\n    return [info.fileList[0]]\n  } else return []\n}\n\nObject.filter = (obj, predicate) =>\n  Object.keys(obj)\n    .filter(key => predicate(obj[key]))// eslint-disable-next-line\n    .reduce((res, key) => (res[key] = obj[key], res), {});\n\nconst EditUser = ({ history, match }) => {\n  const { updateUser } = useContext(UserContext)\n  const [user, setUser] = useState(null)\n  const [loading, setLoading] = useState(true)\n  const form = useRef(null)\n\n  useEffect(() => {\n    const init = async () => {\n      const jwtToken = localStorage.getItem('jwt')\n      try {\n        if (jwtToken) {\n          const options = {\n            method: 'GET',\n            url: API_BASE_URL + \"/user/loginjwt\",\n            headers: { 'jwt-token': jwtToken }\n          }\n          const res = await axios.request(options)\n          setUser(res.data)\n        } else {\n          setUser(null)\n        }\n      } catch (error) {\n        console.log(error);\n        localStorage.removeItem('jwt')\n      }\n      setLoading(false)\n    }\n    init()\n  }, [])\n\n\n  const onFinish = async (form) => {\n    setLoading(true)\n    let filterData = Object.filter(form, item => item !== undefined)\n    for (const key in filterData) {\n      if (filterData[key] === null) filterData[key] = ''\n    }\n    const jwt = localStorage.getItem('jwt')\n    const data = new FormData()\n    for (const key in filterData) {\n      if (key !== 'logo' && key !== 'logo2') {\n        const item = filterData[key];\n        data.append(key, item)\n      } else {\n        data.append(key, form[key][0].originFileObj)\n      }\n    }\n    try {\n      const options = {\n        url: API_BASE_URL + '/user/',\n        method: 'PUT',\n        data,\n        headers: {\n          'Content-Type': 'multipart/form-data',\n          'jwt-token': jwt\n        }\n      }\n      await axios.request(options)\n      await updateUser()\n      message.success({ content: 'Usuario editado con exito' })\n      setLoading(false)\n      history.push(APP_PREFIX_PATH + '/users')\n    } catch (error) {\n      setLoading(false)\n      console.error(error);\n    }\n  }\n\n  const setForm = (v, input) => {\n    setUser({ ...user, [input]: v.hex })\n    form.current.setFieldsValue({\n      [input]: v.hex\n    })\n  }\n\n  if (loading) return (\n    <Loading cover=\"content\" />\n  )\n\n  return (\n    <Card>\n      <Form {...layout} name=\"add-user\" onFinish={onFinish} validateMessages={validateMessages} initialValues={{ ...user }} ref={form}>\n        <Form.Item name={['name']} label=\"Nombre\" rules={[{ required: true }]}>\n          <Input />\n        </Form.Item>\n        <Form.Item name={['email']} label=\"Correo\" rules={[{ type: 'email', required: true }]}>\n          <Input />\n        </Form.Item>\n        <Form.Item name={['logo']} label=\"Logo\" valuePropName=\"logo\" getValueFromEvent={uploadHandle} >\n          <Upload.Dragger style={{ width: '300px' }} method='get' accept='image/*' name=\"logo\" action=\"/upload.do\" multiple={false} onChange={uploadHandle} onPreview>\n            <p className=\"ant-upload-drag-icon\">\n              <InboxOutlined />\n            </p>\n            <p className=\"ant-upload-text\" style={{ color: 'black' }}>Haz click o arrastra tu logo a esta area</p>\n          </Upload.Dragger>\n        </Form.Item>\n        <Form.Item name={['logo2']} label=\"Logo2\" valuePropName=\"logo2\" getValueFromEvent={uploadHandle} >\n          <Upload.Dragger style={{ width: '300px' }} method='get' accept='image/*' name=\"logo2\" action=\"/upload.do\" multiple={false} onChange={uploadHandle} onPreview>\n            <p className=\"ant-upload-drag-icon\">\n              <InboxOutlined />\n            </p>\n            <p className=\"ant-upload-text\" style={{ color: 'black' }}>Haz click o arrastra tu logo a esta area</p>\n          </Upload.Dragger>\n        </Form.Item>\n        <Form.Item name={['phone']} label=\"Telefono\" >\n          <InputNumber style={{ width: '200px' }} />\n        </Form.Item>\n        <Form.Item name={['webAddress']} label=\"Direccion web\" >\n          <Input />\n        </Form.Item>\n        <Form.Item name={['address']} label=\"Direccion\" >\n          <Input />\n        </Form.Item>\n        <Form.Item name={['businessName']} label=\"Razon social\" >\n          <Input />\n        </Form.Item>\n        <Form.Item name={['nit']} label=\"NIT\" >\n          <InputNumber style={{ width: '200px' }} />\n        </Form.Item>\n        <Form.Item name={['mainColor']} label=\"Color principal\" >\n          <ColorPicker colorChange={(v) => setForm(v, 'mainColor')} color={user.mainColor} />\n        </Form.Item>\n        <Form.Item name={['secondaryColor']} label=\"Color secundario\" >\n          <ColorPicker colorChange={(v) => setForm(v, 'secondaryColor')} color={user.secondaryColor} />\n        </Form.Item>\n        <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 4 }}>\n          <Button type=\"primary\" htmlType=\"submit\">\n            Guardar\n          </Button>\n          <Button type=\"ghost\" onClick={() => history.push(APP_PREFIX_PATH + '/users')} style={{ marginLeft: '15px' }}>\n            Volver\n          </Button>\n        </Form.Item>\n      </Form>\n    </Card>\n  )\n}\n\nexport default EditUser\n"],"names":["layout","labelCol","span","wrapperCol","validateMessages","required","types","email","number","range","uploadHandle","info","fileList","Object","filter","obj","predicate","keys","key","reduce","res","history","updateUser","match","useContext","UserContext","useState","user","setUser","loading","setLoading","form","useRef","useEffect","init","jwtToken","localStorage","getItem","options","method","url","API_BASE_URL","headers","axios","data","console","log","removeItem","onFinish","filterData","item","undefined","jwt","FormData","append","originFileObj","message","content","push","APP_PREFIX_PATH","error","setForm","v","input","hex","current","setFieldsValue","cover","name","initialValues","ref","label","rules","type","valuePropName","getValueFromEvent","style","width","accept","action","multiple","onChange","onPreview","className","color","colorChange","mainColor","secondaryColor","offset","htmlType","onClick","marginLeft"],"sourceRoot":""}